name: Dependency Security Check

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual trigger

jobs:
  check-outdated:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.11.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for outdated packages
        run: |
          echo "## Outdated Dependencies Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for outdated packages
          pnpm outdated --format json > outdated.json || true

          # Parse and display results
          if [ -s outdated.json ]; then
            echo "⚠️ Found outdated dependencies:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Package | Current | Latest | Type |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|--------|------|" >> $GITHUB_STEP_SUMMARY
            
            # Use jq to parse JSON (simplified example)
            cat outdated.json | jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.latest) | \(.value.dependencyType) |"' >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Error parsing outdated packages"
          else
            echo "✅ All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for security advisories
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Advisories" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run audit and capture results
          pnpm audit --json > audit.json || true

          if grep -q '"severity": "critical"' audit.json || grep -q '"severity": "high"' audit.json; then
            echo "🚨 **Critical or High severity vulnerabilities found!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Create an issue if critical vulnerabilities are found
            echo "CREATE_ISSUE=true" >> $GITHUB_ENV
          else
            echo "✅ No critical or high severity vulnerabilities found." >> $GITHUB_STEP_SUMMARY
          fi

          # Show summary
          pnpm audit || true

      - name: Create issue for critical vulnerabilities
        if: env.CREATE_ISSUE == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Security Alert: Critical vulnerabilities detected - ${date}`,
              body: `## Security vulnerabilities were detected in dependencies
              
              Please review the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.
              
              ### Immediate Actions Required:
              1. Review the security advisories
              2. Update affected dependencies
              3. Test the updates thoroughly
              4. Deploy the fixes
              
              cc @${context.repo.owner}`,
              labels: ['security', 'dependencies', 'critical']
            });

            console.log(`Created issue #${issue.data.number}`);

  check-licenses:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.11.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate license report
        run: |
          echo "## License Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Install license checker
          npm install -g license-checker

          # Generate license summary
          license-checker --production --summary >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Checking for problematic licenses..." >> $GITHUB_STEP_SUMMARY

          # Check for GPL/AGPL licenses
          if license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;Unlicense' > /dev/null 2>&1; then
            echo "✅ All licenses are compatible!" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Found potentially incompatible licenses!" >> $GITHUB_STEP_SUMMARY
            license-checker --production --exclude 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;Unlicense' >> $GITHUB_STEP_SUMMARY || true
          fi
